Key Generation
Use the master password as input to a key derivation function (KDF) like PBKDF2, Argon2, or scrypt.
The KDF will produce a fixed-size key suitable for use with a symmetric encryption algorithm (like AES).
Important: The KDF should use a salt to protect against rainbow table attacks. This salt can be stored unencrypted.
Encrypting and Saving Data
When the user stores a password (put command):
Derive the symmetric key using the master password and the KDF.
Encrypt the data (e.g., the username and password for a website) using the symmetric key.
Save the encrypted data along with a hash for integrity checking.
Decrypting Data
When the user wants to retrieve a password (get command):
Derive the symmetric key again using the master password and the KDF.
Retrieve the encrypted data from storage.
Decrypt the data using the symmetric key.
Verify the integrity of the decrypted data using the stored hash.
Integrity Check
Along with the encrypted data, store a hash of the encrypted data for integrity checking. This can be done using a hash function like SHA-256.
When retrieving data, calculate the hash of the decrypted data and compare it with the stored hash to ensure integrity.
Error Handling
If the decryption fails or the integrity check fails, it implies either the data has been tampered with or the wrong master password has been entered.
Implementation Tips
You can use a library like OpenSSL or libsodium in C for cryptographic operations.
It's crucial to handle cryptographic keys and sensitive data securely, ensuring they are not exposed in memory longer than necessary.
Example Commands
Initialization: $ ./tajnik init mAsterPasswrd
Initializes the tool, sets up storage, and saves the salt for the KDF.
Storing a Password: $ ./tajnik put mAsterPasswrd www.fer.hr neprobojnAsifrA
Encrypts and stores the password for www.fer.hr.
Retrieving a Password: $ ./tajnik get mAsterPasswrd www.fer.hr
Decrypts and displays the password for www.fer.hr.
Error Case: $ ./tajnik get wrongPasswrd www.fer.hr
Fails to decrypt or integrity check fails, indicating the wrong master password.
This approach ensures that the master password is never stored or directly hashed, increasing security. 
The security of this tool relies heavily on the robustness of the cryptographic algorithms used and 
the secure implementation of the key derivation, encryption, and decryption processes.
=======================================================================================
=======================================================================================
• Koristiti provjerena programska ostvarenja algoritama
• NIKAKO se NE preporuča vlastita implementacija
• NE koristiti način kriptiranja ECB
• IV generirati slučajno
• NE koristiti stalno isti simetrični ključ
• Gotovo uvijek je potrebno osigurati i integritet